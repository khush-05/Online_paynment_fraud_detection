# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vc-G4fE4mT1J6puUd-N1lDU1y8Ar6O7S
"""

import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_csv('Online Payments Fraud Detection.csv')
df.head()

df.shape

df.describe()

df.drop(['nameOrig', 'nameDest', 'isFlaggedFraud'], axis=1, inplace=True)

df.head()

df = pd.get_dummies(df, columns=['type'], drop_first=True)

df.head()

df['balance_diff_orig'] = df['oldbalanceOrg'] - df['newbalanceOrig']
df['balance_diff_dest'] = df['newbalanceDest'] - df['oldbalanceDest']

df.isnull().sum()

df.dropna(inplace=True)

df.isnull().sum()

X = df.drop('isFraud', axis=1)
y = df['isFraud']

X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.utils.class_weight import compute_class_weight
import numpy as np

weights = compute_class_weight(class_weight='balanced', classes=np.unique(y_train), y=y_train)
class_weights = {0: weights[0], 1: weights[1]}

model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy', tf.keras.metrics.Precision(), tf.keras.metrics.Recall(), tf.keras.metrics.AUC()])

history = model.fit(X_train, y_train,
                    validation_split=0.2,
                    epochs=10,
                    batch_size=1024,
                    class_weight=class_weights,
                    verbose=1)

loss, accuracy, precision, recall, auc = model.evaluate(X_test, y_test)
print(f"\nâœ… Evaluation on Test Set:\n"
      f"Accuracy: {accuracy:.4f}\n"
      f"Precision: {precision:.4f}\n"
      f"Recall: {recall:.4f}\n"
      f"AUC: {auc:.4f}")


# Save model
model.save("fraud_ann_model.h5")

# Save scaler
import joblib
joblib.dump(scaler, "scaler.pkl")
